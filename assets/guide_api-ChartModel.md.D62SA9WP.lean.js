import{_ as e,c as a,a7 as d,o as r}from"./chunks/framework.CS1J3kmr.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api-ChartModel.md","filePath":"guide/api-ChartModel.md"}'),n={name:"guide/api-ChartModel.md"};function h(i,t,o,l,s,b){return r(),a("div",null,t[0]||(t[0]=[d('<h3 id="一、chartmodel" tabindex="-1"><strong>一、ChartModel</strong> <a class="header-anchor" href="#一、chartmodel" aria-label="Permalink to &quot;**一、ChartModel**&quot;">​</a></h3><p>所有图表配置构建类的基类。</p><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>animateX</td><td>展示图表时带有X轴动画。</td></tr><tr><td>animateXY</td><td>展示图表时同时带有X轴，Y轴动画。</td></tr><tr><td>animateY</td><td>展示图表时带有Y轴动画。</td></tr><tr><td>calcMinMax</td><td>计算 y-min 和 y-max 值以及 y-delta 和 x-delta 值。</td></tr><tr><td>calculateOffsets</td><td>计算图表到边框的偏移量，具体取决于图例的位置，x轴y轴的长度，及其的标签位置。</td></tr><tr><td>clear</td><td>清空图表的所有数据，将其置空null，并刷新图表。</td></tr><tr><td>clearValues</td><td>从图表中删除所有数据集（以及条目），并刷新图表。</td></tr><tr><td>getAnimator</td><td>返回负责对图表值进行动画处理的动画制作者。</td></tr><tr><td>getCenter</td><td>返回图表(整个视图)的中心点的可回收的MPPointF实例。</td></tr><tr><td>getCenterOffsets</td><td>返回图表的图形绘制的中心区域的可回收的MPPointF实例。</td></tr><tr><td>getCenterOfView</td><td>返回图表(整个视图)的中心点的可回收的MPPointF实例。</td></tr><tr><td>getContentRect</td><td>返回图表绘制的内容区域的矩形。</td></tr><tr><td>getData</td><td>返回已为图表设置的 ChartData 对象。</td></tr><tr><td>getDefaultValueFormatter</td><td>返回默认的数据格式化接口实现类。</td></tr><tr><td>getHighlightByTouchPoint</td><td>返回 LineChart，ScatterChart，CandleStickChart等图表触摸屏幕时的Highlight 对象（包含 x-index 和 DataSet 索引）。</td></tr><tr><td>getHighlighted</td><td>返回当前高亮显示值的数组。这可能是空值，如果没有突出显示，则为空数组。</td></tr><tr><td>getHighlighter</td><td>返回当前高亮显示条目接口。</td></tr><tr><td>getLegend</td><td>获取图例对象，通过该对象的setEnable(false)方法可以关闭图例显示。</td></tr><tr><td>getLegendRenderer</td><td>获取图例渲染器。</td></tr><tr><td>getRenderer</td><td>获取图表数据渲染器。</td></tr><tr><td>getXAxis</td><td>获取X轴对象。</td></tr><tr><td>invalidate</td><td>重绘图表。</td></tr><tr><td>notifyDataSetChanged</td><td>图表数据刷新。</td></tr><tr><td>onChartSizeChanged</td><td>更新图表正确Size。</td></tr><tr><td>onDraw</td><td>图表绘制方法。</td></tr><tr><td>setContext2D</td><td>设置图表绘制的画布。</td></tr><tr><td>setData</td><td>设置图表数据。</td></tr><tr><td>setDragDecelerationEnabled</td><td>设置是否开启惯性滑动。</td></tr><tr><td>setHitTestMode</td><td>设置触摸测试类型。</td></tr><tr><td>getHitTestMode</td><td>获取触摸测试类型。</td></tr></tbody></table><h2 id="_1-animatex" tabindex="-1"><strong>1.animateX</strong> <a class="header-anchor" href="#_1-animatex" aria-label="Permalink to &quot;**1.animateX**&quot;">​</a></h2><p>public animateX(durationMillis: number): void;</p><p>展示图表时带有X轴动画。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillis</td><td>number</td><td>是</td><td>动画播放的时长，单位毫秒。</td></tr></tbody></table><p>public animateX(durationMillis: number, easing: string): void;</p><p>展示图表时带有X轴动画。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillis</td><td>number</td><td>是</td><td>动画播放的时长，单位毫秒。</td></tr><tr><td>easing</td><td>string</td><td>是</td><td><a href="https://docs.openharmony.cn/pages/v5.0/zh-cn/application-dev/reference/apis-arkui/js-apis-animator.md" target="_blank" rel="noreferrer">动画插值曲线</a>。</td></tr></tbody></table><h2 id="_2-animatexy" tabindex="-1"><strong>2.animateXY</strong> <a class="header-anchor" href="#_2-animatexy" aria-label="Permalink to &quot;**2.animateXY**&quot;">​</a></h2><p>public animateXY(durationMillisX: number, durationMillisY: number): void;</p><p>展示图表时同时带有X轴，Y轴动画。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillisX</td><td>number</td><td>是</td><td>X轴条目动画播放的时长，单位毫秒。</td></tr><tr><td>durationMillisY</td><td>number</td><td>是</td><td>Y轴条目动画播放的时长，单位毫秒。</td></tr></tbody></table><p>public animateXY(durationMillisX: number, durationMillisY: number, easingX: string): void;</p><p>展示图表时同时带有X轴，Y轴动画。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillisX</td><td>number</td><td>是</td><td>X轴条目动画播放的时长，单位毫秒。</td></tr><tr><td>durationMillisY</td><td>number</td><td>是</td><td>Y轴条目动画播放的时长，单位毫秒。</td></tr><tr><td>easingX</td><td>string</td><td>是</td><td>X轴<a href="https://docs.openharmony.cn/pages/v5.0/zh-cn/application-dev/reference/apis-arkui/js-apis-animator.md" target="_blank" rel="noreferrer">动画插值曲线</a>。</td></tr></tbody></table><p>public animateXY(durationMillisX: number, durationMillisY: number, easingX: string, easingY: string): void;</p><p>展示图表时同时带有X轴，Y轴动画。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillisX</td><td>number</td><td>是</td><td>X轴条目动画播放的时长，单位毫秒。</td></tr><tr><td>durationMillisY</td><td>number</td><td>是</td><td>Y轴条目动画播放的时长，单位毫秒。</td></tr><tr><td>easingX</td><td>string</td><td>是</td><td>X轴<a href="https://docs.openharmony.cn/pages/v5.0/zh-cn/application-dev/reference/apis-arkui/js-apis-animator.md" target="_blank" rel="noreferrer">动画插值曲线</a>。</td></tr><tr><td>easingY</td><td>string</td><td>是</td><td>Y轴<a href="https://docs.openharmony.cn/pages/v5.0/zh-cn/application-dev/reference/apis-arkui/js-apis-animator.md" target="_blank" rel="noreferrer">动画插值曲线</a>。</td></tr></tbody></table><h2 id="_3-animatey" tabindex="-1"><strong>3.animateY</strong> <a class="header-anchor" href="#_3-animatey" aria-label="Permalink to &quot;**3.animateY**&quot;">​</a></h2><p>展示图表时带有Y轴动画。</p><p>public animateY(durationMillis: number): void;</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillis</td><td>number</td><td>是</td><td>动画播放的时长，单位毫秒。</td></tr></tbody></table><p>public animateY(durationMillis: number, easing: string): void;</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>durationMillis</td><td>number</td><td>是</td><td>动画播放的时长，单位毫秒。</td></tr><tr><td>easing</td><td>string</td><td>是</td><td><a href="https://docs.openharmony.cn/pages/v5.0/zh-cn/application-dev/reference/apis-arkui/js-apis-animator.md" target="_blank" rel="noreferrer">动画插值曲线</a>。</td></tr></tbody></table><h2 id="_4-calcminmax" tabindex="-1"><strong>4.calcMinMax</strong> <a class="header-anchor" href="#_4-calcminmax" aria-label="Permalink to &quot;**4.calcMinMax**&quot;">​</a></h2><p>protected abstract calcMinMax() : void;</p><p>计算 y-min 和 y-max 值以及 y-delta 和 x-delta 值。</p><h2 id="_5-calculateoffsets" tabindex="-1"><strong>5.calculateOffsets</strong> <a class="header-anchor" href="#_5-calculateoffsets" aria-label="Permalink to &quot;**5.calculateOffsets**&quot;">​</a></h2><p>protected abstract calculateOffsets() : void;</p><p>计算图表到边框的偏移量，具体取决于图例的位置，x轴y轴的长度，及其的标签位置。</p><h2 id="_6-clear" tabindex="-1"><strong>6.clear</strong> <a class="header-anchor" href="#_6-clear" aria-label="Permalink to &quot;**6.clear**&quot;">​</a></h2><p>public clear() : void;</p><p>清空图表的所有数据，将其置空null，并刷新图表。</p><h2 id="_7-clearvalues" tabindex="-1"><strong>7.clearValues</strong> <a class="header-anchor" href="#_7-clearvalues" aria-label="Permalink to &quot;**7.clearValues**&quot;">​</a></h2><p>public clearValues() : void;</p><p>从图表中删除所有数据集（以及条目），并刷新图表。</p><h2 id="_8-getanimator" tabindex="-1"><strong>8.getAnimator</strong> <a class="header-anchor" href="#_8-getanimator" aria-label="Permalink to &quot;**8.getAnimator**&quot;">​</a></h2><p>public getAnimator(): ChartAnimator | null;</p><p>返回负责对图表值进行动画处理的动画制作者。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>ChartAnimator | null</td><td>动画管理类。</td></tr></tbody></table><h2 id="_9-getcenter" tabindex="-1"><strong>9.getCenter</strong> <a class="header-anchor" href="#_9-getcenter" aria-label="Permalink to &quot;**9.getCenter**&quot;">​</a></h2><p>public getCenter(): MPPointF;</p><p>返回图表(整个视图)的中心点的可回收的MPPointF实例。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>MPPointF</td><td>可回收的MPPointF实例。</td></tr></tbody></table><h2 id="_10-getcenteroffsets" tabindex="-1"><strong>10.getCenterOffsets</strong> <a class="header-anchor" href="#_10-getcenteroffsets" aria-label="Permalink to &quot;**10.getCenterOffsets**&quot;">​</a></h2><p>public getCenterOffsets(): MPPointF | null;</p><p>返回图表的图形绘制的中心区域的可回收的MPPointF实例。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>MPPointF | null</td><td>可回收的MPPointF实例。</td></tr></tbody></table><h2 id="_11-getcenterofview" tabindex="-1"><strong>11.getCenterOfView</strong> <a class="header-anchor" href="#_11-getcenterofview" aria-label="Permalink to &quot;**11.getCenterOfView**&quot;">​</a></h2><p>public getCenterOfView(): MPPointF;</p><p>返回图表(整个视图)的中心点的可回收的MPPointF实例。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>MPPointF</td><td>可回收的MPPointF实例。</td></tr></tbody></table><h2 id="_12-getcontentrect" tabindex="-1"><strong>12.getContentRect</strong> <a class="header-anchor" href="#_12-getcontentrect" aria-label="Permalink to &quot;**12.getContentRect**&quot;">​</a></h2><p>public getContentRect(): Rect;</p><p>返回图表绘制的内容区域的矩形。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Rect</td><td>图表绘制的内容区域的矩形。</td></tr></tbody></table><h2 id="_13-getdata" tabindex="-1"><strong>13.getData</strong> <a class="header-anchor" href="#_13-getdata" aria-label="Permalink to &quot;**13.getData**&quot;">​</a></h2><p>public getData(): T | null ;</p><p>返回已为图表设置的 ChartData 对象。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>T| null</td><td>数据对象。</td></tr></tbody></table><h2 id="_14-getdefaultvalueformatter" tabindex="-1"><strong>14.getDefaultValueFormatter</strong> <a class="header-anchor" href="#_14-getdefaultvalueformatter" aria-label="Permalink to &quot;**14.getDefaultValueFormatter**&quot;">​</a></h2><p>public getDefaultValueFormatter(): IValueFormatter;</p><p>返回默认的数据格式化接口实现类。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>IValueFormatter</td><td>数据格式化接口实现类。</td></tr></tbody></table><h2 id="_15-gethighlightbytouchpoint" tabindex="-1"><strong>15.getHighlightByTouchPoint</strong> <a class="header-anchor" href="#_15-gethighlightbytouchpoint" aria-label="Permalink to &quot;**15.getHighlightByTouchPoint**&quot;">​</a></h2><p>public getHighlightByTouchPoint(x: number, y: number): Highlight | null;</p><p>返回 LineChart，ScatterChart，CandleStickChart等图表触摸屏幕时的Highlight 对象（包含 x-index 和 DataSet 索引）。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td>是</td><td>屏幕触摸点的x轴坐标。</td></tr><tr><td>y</td><td>number</td><td>是</td><td>屏幕触摸点的y轴坐标。</td></tr></tbody></table><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Highlight | null</td><td>触摸点的高亮对象。</td></tr></tbody></table><h2 id="_16-gethighlighted" tabindex="-1"><strong>16.getHighlighted</strong> <a class="header-anchor" href="#_16-gethighlighted" aria-label="Permalink to &quot;**16.getHighlighted**&quot;">​</a></h2><p>public getHighlighted(): Highlight[] | null;</p><p>返回当前高亮显示值的数组。这可能是空值，如果没有突出显示，则为空数组。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>number</td><td>是</td><td>屏幕触摸点的x轴坐标。</td></tr><tr><td>y</td><td>number</td><td>是</td><td>屏幕触摸点的y轴坐标。</td></tr></tbody></table><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Highlight | null</td><td>触摸点的高亮对象。</td></tr></tbody></table><h2 id="_17-gethighlighter" tabindex="-1"><strong>17.getHighlighter</strong> <a class="header-anchor" href="#_17-gethighlighter" aria-label="Permalink to &quot;**17.getHighlighter**&quot;">​</a></h2><p>public getHighlighter(): IHighlighter | null;</p><p>返回当前高亮显示条目接口。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>IHighlighter | null</td><td>获取触摸点的高亮对象接口类。</td></tr></tbody></table><h2 id="_18-getlegend" tabindex="-1"><strong>18.getLegend</strong> <a class="header-anchor" href="#_18-getlegend" aria-label="Permalink to &quot;**18.getLegend**&quot;">​</a></h2><p>public getLegend(): Legend | null ;</p><p>获取图例对象。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Legend | null</td><td>获取图例对象。</td></tr></tbody></table><h2 id="_19-getlegendrenderer" tabindex="-1"><strong>19.getLegendRenderer</strong> <a class="header-anchor" href="#_19-getlegendrenderer" aria-label="Permalink to &quot;**19.getLegendRenderer**&quot;">​</a></h2><p>public getLegendRenderer(): LegendRenderer | null;</p><p>获取图例渲染器。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>LegendRenderer| null</td><td>获取图例渲染器。</td></tr></tbody></table><h2 id="_20-getrenderer" tabindex="-1"><strong>20.getRenderer</strong> <a class="header-anchor" href="#_20-getrenderer" aria-label="Permalink to &quot;**20.getRenderer**&quot;">​</a></h2><p>public getRenderer(): DataRenderer | null;</p><p>获取图表数据渲染器。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>DataRenderer | null</td><td>获取图表数据渲染器。</td></tr></tbody></table><h2 id="_21-getxaxis" tabindex="-1"><strong>21.getXAxis</strong> <a class="header-anchor" href="#_21-getxaxis" aria-label="Permalink to &quot;**21.getXAxis**&quot;">​</a></h2><p>public getXAxis(): XAxis | null;</p><p>获取X轴对象。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>XAxis | null</td><td>获取X轴对象。</td></tr></tbody></table><h2 id="_22-invalidate" tabindex="-1"><strong>22.invalidate</strong> <a class="header-anchor" href="#_22-invalidate" aria-label="Permalink to &quot;**22.invalidate**&quot;">​</a></h2><p>public abstract invalidate();</p><p>重绘图表。</p><h2 id="_23-notifydatasetchanged" tabindex="-1"><strong>23.notifyDataSetChanged</strong> <a class="header-anchor" href="#_23-notifydatasetchanged" aria-label="Permalink to &quot;**23.notifyDataSetChanged**&quot;">​</a></h2><p>public abstract notifyDataSetChanged();</p><p>图表数据刷新。</p><h2 id="_24-onchartsizechanged" tabindex="-1"><strong>24.onChartSizeChanged</strong> <a class="header-anchor" href="#_24-onchartsizechanged" aria-label="Permalink to &quot;**24.onChartSizeChanged**&quot;">​</a></h2><p>public abstract onChartSizeChanged(newWidth: number, newHeight: number, oldWidth: number, oldHeight: number): void;</p><p>更新图表正确Size。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>newWidth</td><td>number</td><td>是</td><td>图表当前显示的宽。</td></tr><tr><td>newHeight</td><td>number</td><td>是</td><td>图表当前显示的高。</td></tr><tr><td>oldWidth</td><td>number</td><td>是</td><td>图表改变Size前显示的宽。</td></tr><tr><td>oldHeight</td><td>number</td><td>是</td><td>图表改变Size前显示的高。</td></tr></tbody></table><h2 id="_25-ondraw" tabindex="-1"><strong>25.onDraw</strong> <a class="header-anchor" href="#_25-ondraw" aria-label="Permalink to &quot;**25.onDraw**&quot;">​</a></h2><p>protected onDraw(c: CanvasRenderingContext2D): void ;</p><p>图表绘制方法。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>c</td><td>CanvasRenderingContext2D</td><td>是</td><td>图表绘制的画布。</td></tr></tbody></table><h2 id="_26-setcontext2d" tabindex="-1"><strong>26.setContext2D</strong> <a class="header-anchor" href="#_26-setcontext2d" aria-label="Permalink to &quot;**26.setContext2D**&quot;">​</a></h2><p>public abstract setContext2D(context2d: CanvasRenderingContext2D);</p><p>设置图表绘制的画布。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>c</td><td>CanvasRenderingContext2D</td><td>是</td><td>图表绘制的画布。</td></tr></tbody></table><h2 id="_27-setdata" tabindex="-1"><strong>27.setData</strong> <a class="header-anchor" href="#_27-setdata" aria-label="Permalink to &quot;**27.setData**&quot;">​</a></h2><p>public setData(data: T) : void;</p><p>设置图表数据。</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>T</td><td>是</td><td>图表数据，T继承自ChartData。</td></tr></tbody></table><h2 id="_28-setdragdecelerationenabled" tabindex="-1"><strong>28.setDragDecelerationEnabled</strong> <a class="header-anchor" href="#_28-setdragdecelerationenabled" aria-label="Permalink to &quot;**28.setDragDecelerationEnabled**&quot;">​</a></h2><p>public setDragDecelerationEnabled(enabled: boolean);</p><p>设置是否开启惯性滑动</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>enabled</td><td>boolean</td><td>是</td><td>能力标识。</td></tr></tbody></table><h2 id="_29-sethittestmode" tabindex="-1"><strong>29.setHitTestMode</strong> <a class="header-anchor" href="#_29-sethittestmode" aria-label="Permalink to &quot;**29.setHitTestMode**&quot;">​</a></h2><p>public setHitTestMode(hitTestMode: HitTestMode)</p><p>设置触摸测试类型</p><p>参数：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>hitTestMode</td><td>HitTestMode</td><td>是</td><td>触摸测试类型</td></tr></tbody></table><h2 id="_30-gethittestmode" tabindex="-1"><strong>30.getHitTestMode</strong> <a class="header-anchor" href="#_30-gethittestmode" aria-label="Permalink to &quot;**30.getHitTestMode**&quot;">​</a></h2><p>public getHitTestMode(): HitTestMode</p><p>获取触摸测试类型。</p><p>返回值：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>HitTestMode</td><td>触摸测试类型</td></tr></tbody></table>',160)]))}const c=e(n,[["render",h]]);export{g as __pageData,c as default};
